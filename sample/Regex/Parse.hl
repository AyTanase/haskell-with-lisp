#?(defbinop >>)
#?(defbinop |alt| :op "<|>" :zero '|empty|)
#?(defoperator >>=)
#?(defoperator =<<)

(extension FlexibleContexts)

(defpackage Parse
  (:use Common Control.Monad (Text.Parsec :as P))
  (:import Data.Function fix)
  (:export Parse.parse))


(type parse (-> String Op))
(defun parse (s)
  (case (P.parse regex "" s)
    ((Left e) (error (show e)))
    ((Right r) (r Finite))))


(type (regex rConcat)
  (=> (Stream s m Char)
      (ParsecT s u m NFA)))

(type rSplit
  (=> (Stream s m Char)
      (-> NFA (ParsecT s u m NFA))))

(define regex (>>= rConcat rSplit))

(define rConcat (liftM (foldr compose id) (many rAtom)))

(defun rSplit (f)
  (alt (>> (char #\|) (liftM (split f) regex))
       (return f)))


(type (rAtom rChar rEscape rGroup rGroup')
  (=> (Stream s m Char)
      (ParsecT s u m NFA)))

(define rAtom (=<< quantify (alt rChar rEscape rGroup)))

(define rChar (liftM Compare (noneOf "\\|()")))

(define rEscape (>> (char #\\) (liftM Compare anyChar)))

(define rGroup (between (char #\() (char #\)) rGroup'))

(define rGroup'
  (alt (>> (try (string "?>")) (liftM cut regex))
       regex))


(type quantify
  (=> (Stream s m Char)
      (-> NFA (ParsecT s u m NFA))))

(defun quantify (f)
  (alt (quantifier #\* makeStar f)
       (quantifier #\+ makePlus f)
       (quantifier #\? makeOpt f)
       (return f)))


(deftype QMaker (-> (-> NFA NFA NFA) NFA NFA))

(type quantifier
  (=> (Stream s m Char)
      (-> Char QMaker NFA (ParsecT s u m NFA))))

(defun quantifier (c make f)
  (>> (char c)
      (alt (>> (char #\+) (return (make atomic f)))
           (>> (char #\?) (return (make (flip split) f)))
           (return (make split f)))))


(type (makeStar makePlus makeOpt) QMaker)

(define (makeStar method f)
  (fix (lambda (g) (method (compose f g) id))))

(define (makePlus method f)
  (compose f (makeStar method f)))

(define (makeOpt method f) (method f id))
