#?(def-binop-as |alt| "<|>" :zero "empty")
#?(defoperator |join-fmap| :op =<<)

(defpackage Exec
  (:use Common Control.Applicative))

(type exec (=> (Num a) (-> Op String (Maybe a))))
(define (exec rx cs)
  (ulabels ((exec' (n Finite xs)
              (Just (tuple n xs)))
            (exec' (n (Compare ?x p) (cons ?x xs))
              (exec' (1+ n) p xs))
            (exec' (_ (Compare _ _) _)
              Nothing)
            (exec' (n (Split p q) xs)
              (alt (exec' n p xs) (exec' n q xs)))
            (exec' (n (Atomic p q r) xs)
              (maybe (exec' n r xs)
                     (uncurry (flip exec' q))
                     (exec' n p xs))))
    (fmap fst (exec' 0 rx cs))))

(type match (=> (Num a) (-> Op String (Maybe (tuple a a)))))
(define match
  (labels ((match' (n rx xs)
             (alt (fmap (pair n) (exec rx xs))
                  (join-fmap (match' (1+ n) rx) (safeTail xs)))))
    (match' 0)))
