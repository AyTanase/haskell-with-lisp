#?(def-binop-as |alt| "<|>" :zero "empty")

(defmodule Exec)

(import Common)
(import Control.Applicative)

(type matchHead (=> (Num a) (-> NFA (list Char) (Maybe a))))
(define matchHead
  (labels ((matchHead' (n Finite _)
             (Just n))
           (matchHead' (n (Compare x rx) (list* y ys))
             (if (= x y)
               (matchHead' (1+ n) rx ys)))
           (matchHead' (_ (Compare _ _) _)
             Nothing)
           (matchHead' (n (Split p q) xs)
             (alt (matchHead' n p xs)
                  (matchHead' n q xs))))
    (matchHead' 0)))

(type match (=> (Num a) (-> NFA (list Char) (Maybe (tuple a a)))))
(define match
  (labels ((match'' (n rx xs)
             (fmap (pair n) (matchHead rx xs)))
           (match' (n rx nil)
             (match'' n rx nil))
           (match' (n rx xs)
             (alt (match'' n rx xs)
                  (match' (1+ n) rx (tail xs)))))
    (match' 0)))
