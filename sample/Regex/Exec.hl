#?(def-binop-as |alt| "<|>" :zero "empty")
#?(defoperator |join-fmap| :op =<<)

(defpackage Exec
  (:use Common Control.Applicative))

(type matchHead (=> (Num a) (-> Op String (Maybe a))))
(define matchHead
  (ulabels ((matchHead' (n Finite _)
              (Just n))
            (matchHead' (n (Compare ?x rx) (cons ?x xs))
              (matchHead' (1+ n) rx xs))
            (matchHead' (_ (Compare _ _) _)
              Nothing)
            (matchHead' (n (Split p q) xs)
              (alt (matchHead' n p xs)
                   (matchHead' n q xs))))
    (matchHead' 0)))

(type match (=> (Num a) (-> Op String (Maybe (tuple a a)))))
(define match
  (labels ((match' (n rx xs)
             (alt (fmap (pair n) (matchHead rx xs))
                  (join-fmap (match' (1+ n) rx) (safeTail xs)))))
    (match' 0)))
