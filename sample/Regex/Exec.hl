#?(def-binop-as |alt| "<|>" :zero "empty")
#?(defoperator |join-fmap| :op =<<)

(defpackage Exec
  (:use Common Control.Applicative))

(type exec (=> (Num a) (-> Op String (Maybe a))))
(define exec
  (ulabels ((exec' (n Finite _)
              (Just n))
            (exec' (n (Compare ?x rx) (cons ?x xs))
              (exec' (1+ n) rx xs))
            (exec' (_ (Compare _ _) _)
              Nothing)
            (exec' (n (Split p q) xs)
              (alt (exec' n p xs) (exec' n q xs))))
    (exec' 0)))

(type match (=> (Num a) (-> Op String (Maybe (tuple a a)))))
(define match
  (labels ((match' (n rx xs)
             (alt (fmap (pair n) (exec rx xs))
                  (join-fmap (match' (1+ n) rx) (safeTail xs)))))
    (match' 0)))
