#?(defoperator |Prelude.+|)
#?(defoperator |Prelude.-|)
#?(defoperator |Prelude.*|)
#?(defoperator |Prelude./|)

(extension FlexibleInstances
           MonoLocalBinds
           MultiParamTypeClasses
           UndecidableInstances)

(defpackage Classes
  (:shadow Prelude negate + - * / recip)
  (:use (:q Prelude))
  (:import GHC.Base liftA2))


(class (Group g) ()
  (type zero g)
  (type negate (-> g g))
  (type (+ -) (-> g g g))
  ((- x) (- zero x))
  ((- x y) (+ x (- y))))

(instance (Group a) ((Num a))
  (zero 0)
  (negate Prelude.negate)
  (+ Prelude.+)
  (- Prelude.-))

(instance (Group (f g))
    (:overlapping (Group g) (Applicative f))
  (zero (pure zero))
  (negate (fmap negate))
  (+ (liftA2 +))
  (- (liftA2 -)))


(class (Action a b) ()
  (type * (-> a b b)))

(instance (Action a a) (:incoherent (Num a))
  (* Prelude.*))

(instance (Action a (f b)) ((Action a b) (Functor f))
  (* (compose fmap *)))

(instance (Action (f a) (f b))
    (:overlapping (Action a b) (Applicative f))
  (* (liftA2 *)))


(class (Ring r) ((Group r) (Action r r))
  (type unit r))

(instance (Ring a) ((Num a)) (unit 1))

(instance (Ring (f r)) ((Ring r) (Applicative f))
  (unit (pure unit)))


(class (Div a b) ((Action a b))
  (type / (-> b a b)))

(instance (Div a a) ((Fractional a))
  (/ Prelude./))

(instance (Div a (f b)) ((Div a b) (Functor f))
  (/ (flip (compose fmap (flip /)))))

(instance (Div (f a) (f b)) ((Div a b) (Applicative f))
  (/ (liftA2 /)))


(class (Field k) ((Ring k) (Div k k)))

(instance (Field k) ((Ring k) (Div k k)))

(type recip (=> (Field k) (-> k k)))
(define (/ x) (/ unit x))

(instance (Div k a) ((Action k a) (Field k))
  ((/ x y) (* (/ y) x)))
