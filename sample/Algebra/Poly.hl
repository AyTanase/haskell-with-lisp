(extension FlexibleContexts
           FlexibleInstances
           MultiParamTypeClasses)

(defpackage Poly
  (:shadow Prelude pure negate + - * (Fractional :all))
  (:use (:q Prelude) Classes)
  (:export (Poly :all)))


(newtype (Poly a) (Poly (list a)) Show)

(instance (Eq (Poly a)) ((Eq a) (Group a))
  ((= (Poly us) (Poly vs))
    (where ((zerop (compose hs:and (map (curry = zero))))
            ((equal xs nil) (zerop xs))
            ((equal nil ys) (zerop ys))
            ((equal ?(x . xs) ?(y . ys))
              (and (= x y) (equal xs ys))))
      (equal us vs))))


(instance (Pure Poly a) (:overlapping)
  (pure (compose Poly list)))

(type pmap (-> (-> a b) (Poly a) (Poly b)))
(define (pmap f (Poly xs)) (Poly (map f xs)))


(type add (=> (Group a) (-> (list a) (list a) (list a))))

(define (add xs nil) xs)

(define (add nil ys) ys)

(define (add ?(x . xs) ?(y . ys))
  (cons (+ x y) (add xs ys)))


(instance (Group (Poly a)) (:overlapping (Group a))
  (zero (Poly nil))
  (negate (pmap negate))
  ((+ (Poly xs) (Poly ys)) (Poly (add xs ys))))


(instance (Action a (Poly b)) (:overlapping (Action a b))
  (* (compose pmap *)))

(instance (Action (Poly a) (Poly b))
    (:overlapping (Action a b) (Group b))
  ((* _ (Poly nil)) zero)
  ((* (Poly xs) (Poly ?(y . ys)))
    (Poly (foldr (lambda (x zs)
                   (cons (* x y) (add (* x ys) zs)))
                 nil xs))))


(instance (Div a (Poly b)) ((Div a b))
  (/ (flip (compose pmap (flip /)))))


(instance (Num (Poly a)) ((Num a))
  (+ +) (- -) (* *)
  (negate negate)
  ((abs (Poly xs)) (pure (sum (map abs xs))))
  (signum undefined)
  (fromInteger (compose pure fromInteger)))
