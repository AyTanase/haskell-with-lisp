(extension FlexibleInstances MultiParamTypeClasses)

(defpackage Poly
  (:import Prelude)
  (:use Classes))

(data (Poly r) (Poly (list r)) Show)

(instance (Eq (Poly a)) ((Eq a) (Monoid a))
  ((= (Poly xs) (Poly ys))
    (labels ((eq (nil xs)
               (hs:and (map (= zero) xs)))
             (eq (xs nil)
               (eq nil xs))
             (eq ((cons x xs) (cons y ys))
               (and (= x y) (eq xs ys))))
      (eq xs ys))))

(type polyMap (-> (-> a b) (Poly a) (Poly b)))
(define (polyMap f (Poly xs)) (Poly (fmap f xs)))

(instance (Pure Poly a) (:overlapping)
  (pure (compose Poly list)))


(type polyAdd (=> (Semigroup s) (-> (list s) (list s) (list s))))
(define (polyAdd nil ys) ys)
(define (polyAdd xs nil) xs)
(define (polyAdd (cons x xs) (cons y ys))
  (cons (+ x y) (polyAdd xs ys)))

(instance (Semigroup (Poly s)) (:overlapping (Semigroup s))
  ((+ (Poly xs) (Poly ys)) (Poly (polyAdd xs ys))))


(instance (Join Poly m) (:overlapping (Monoid m))
  ((join (Poly xs))
    (labels ((join' (nil) nil)
             (join' ((cons (Poly xs) ys))
               (polyAdd xs (cons zero (join' ys)))))
      (Poly (join' xs)))))


(instance (Group (Poly g)) (:overlapping (Group g))
  (negate (polyMap negate)))


(instance (Action a (Poly b)) (:overlapping (Action a b))
  (#'(* x) (polyMap #'(* x))))

(instance (Action (Poly a) (Poly b))
    (:overlapping (Action a b) (Semigroup b))
  ((* (Poly xs) (Poly ys))
    (labels ((act (xs nil) nil)
             (act (nil ys) nil)
             (act ((cons x xs) ys)
               (cons (* x (head ys))
                     (polyAdd (* x (tail ys)) (act xs ys)))))
      (Poly (act xs ys)))))
