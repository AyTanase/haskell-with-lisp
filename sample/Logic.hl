#?(defun nth-name (name n)
    (if (= n 1)
      name
      (format-symbol "~a~d" name n)))

#?(defoperator |apply| :op <*>)

(defpackage Logic
  (:import Prelude const apply))

#|
const :: (-> a b a)
apply :: (-> (-> a b c) (-> a b) a c)
|#


#|
apply       :: (-> (-> a (-> b a) a) (-> a b a) a a)
const       :: (-> a (-> b a) a)
apply const :: (-> (-> a b a) a a)
|#
(type id (-> a a))
(define id (apply const const))


#|
x       :: a
g       :: (-> a b)
g x     :: b
f       :: (-> b c)
f (g x) :: c

const f         :: (-> a b c)
apply           :: (-> (-> a b c) (-> a b) a c)
apply (const f) :: (-> (-> a b) a c)

const apply
  :: (-> (-> b c) (-> a b c) (-> a b) a c)
apply
  :: (-> (-> (-> b c) (-> a b c) (-> a b) a c) (-> (-> b c) a b c) (-> b c) (-> a b) a c)
apply (const apply)
  :: (-> (-> (-> b c) a b c) (-> b c) (-> a b) a c)
const
  :: (-> (-> b c) a b c)
|#
(type compose (-> (-> b c) (-> a b) a c))
(define compose (apply (const apply) const))


#|
liftCompose f x g y = f x (g y)
liftCompose f x     = (.) (f x)
|#
(type liftCompose (-> (-> b c d) b (-> a c) a d))
(define liftCompose (curry compose compose))

#?(defun gencompose (n)
    (let ((vs (genvars n))
          (name (nth-name '|compose| n)))
      `(progn
         (|type| ,name (-> (-> |a| |b|) (-> ,@vs |a|) ,@vs |b|))
         (|define| ,name (|liftCompose| ,(nth-name '|compose| (1- n))))
         (terpri))))

#?(eval (gencompose 2))


#|
liftApply f g h x = f (g x) (h x)
                  = (.) f g x (h x)
liftApply f g     = apply ((.) f g)
|#
(type liftApply (-> (-> b c d) (-> a b) (-> a c) a d))
(define liftApply (compose2 apply compose))

#?(defun genapply (n)
    (let ((vs (genvars n))
          (name (nth-name '|apply| n)))
      `(progn
         (|type| ,name (-> (-> ,@vs |a| |b|) (-> ,@vs |a|) ,@vs |b|))
         (|define| ,name (|liftApply| ,(nth-name '|apply| (1- n))))
         (terpri))))

#?(loop for i from 2 to 3
    do (eval (genapply i)))


#|
y     :: a
f     :: (-> a b c)
f y   :: (-> b c)
x     :: b
f y x :: c

f                 :: (-> a b c)
apply             :: (-> (-> a b c) (-> a b) a c)
apply f           :: (-> (-> a b) a c)
const x           :: (-> a b)
apply f (const x) :: (-> a c)

const f                :: (-> b a b c)
apply2                 :: (-> (-> b a b c) (-> b a b) b a c)
apply2 (const f)       :: (-> (-> b a b) b a c)
const                  :: (-> b a b)
apply2 (const f) const :: (-> b a c)

const        :: (-> (-> a b c) b a b c)
apply3       :: (-> (-> (-> a b c) b a b c) (-> (-> a b c) b a b) (-> a b c) b a c)
apply3 const :: (-> (-> (-> a b c) b a b) (-> a b c) b a c)
const const  :: (-> (-> a b c) b a b)
|#
(type flip (-> (-> a b c) b a c))
(define flip (apply3 const (const const)))

(type join (-> (-> a a b) a b))
(define join (flip apply id))
