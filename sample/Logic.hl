#?(defoperator |apply| <*>)

(defpackage Logic
  (:import Prelude (Applicative (pure apply))))

#|
pure  :: Applicative f => a -> f a
apply :: Applicative f => f (a -> b) -> f a -> f b
|#

(type const (-> a b a))
(define const pure)


#|
apply       :: (a -> (b -> a) -> a) -> (a -> b -> a) -> a -> a
const       :: a -> (b -> a) -> a
apply const :: (a -> b -> a) -> a -> a
const       :: a -> b -> a
|#
(type id (-> a a))
(define id (apply const const))

#?(write-line "infixr 0 $")
(type funcall (-> (-> a b) a b))
(define funcall id)


#|
f              :: a -> b
pure           :: (a -> b) -> f (a -> b)
pure f         :: f (a -> b)
apply          :: f (a -> b) -> f a -> f b
apply (pure f) :: f a -> f b

apply
  :: ((a -> b) -> f (a -> b) -> f a -> f b) -> ((a -> b) -> f (a -> b)) -> (a -> b) -> f a -> f b
const apply
  :: (a -> b) -> f (a -> b) -> f a -> f b
apply (const apply)
  :: ((a -> b) -> f (a -> b)) -> (a -> b) -> f a -> f b
pure
  :: (a -> b) -> f (a -> b)
|#
(type liftA (=> (Applicative f) (-> (-> a b) (f a) (f b))))
(define liftA (apply (const apply) pure))

(type compose (-> (-> b c) (-> a b) a c))
(define compose liftA)


#|
apply         :: f (b -> c) -> f b -> f c
compose apply :: (f a -> f (b -> c)) -> f a -> f b -> f c
liftA         :: (a -> b -> c) -> f a -> f (b -> c)
|#
(type liftA2 (=> (Applicative f) (-> (-> a b c) (f a) (f b) (f c))))
(define liftA2 (compose (funcall compose apply) liftA))


#|
f                      :: f (a -> b)
apply                  :: f (a -> b) -> f a -> f b
apply f                :: f a -> f b
pure                   :: a -> f a
compose                :: (f a -> f b) -> (a -> f a) -> a -> f b
compose (apply f) pure :: a -> f b

apply      :: f (a -> b) -> f a -> f b
const pure :: f (a -> b) -> a -> f a
|#
(type flip (=> (Applicative f) (-> (f (-> a b)) a (f b))))
(define flip (liftA2 compose apply (const pure)))

(type join (-> (-> a a b) a b))
(define join (hs:flip apply id))
