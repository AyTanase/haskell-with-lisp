module Logic where
import Prelude (const, (<*>))
id :: (a -> a)
id = (((<*>) :: ((a -> b -> c) -> (a -> b) -> a -> c)) const const)
(.) :: ((b -> c) -> (a -> b) -> a -> c)
(.) = (((<*>) :: ((a -> b -> c) -> (a -> b) -> a -> c)) (const ((<*>) :: ((a -> b -> c) -> (a -> b) -> a -> c))) const)
fixcompose = ((.) (.))
compose2 = (fixcompose (.))
fixapply = (compose2 ((<*>) :: ((a -> b -> c) -> (a -> b) -> a -> c)) (.))
apply2 = (fixapply ((<*>) :: ((a -> b -> c) -> (a -> b) -> a -> c)))
apply3 = (fixapply apply2)
flip :: ((a -> b -> c) -> b -> a -> c)
flip = (apply3 const (const const))
join :: ((a -> a -> b) -> a -> b)
join = (flip ((<*>) :: ((a -> b -> c) -> (a -> b) -> a -> c)) id)
