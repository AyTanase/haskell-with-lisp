(extension FlexibleInstances UndecidableInstances)

(defpackage Algebra
  (:shadow Prelude Monoid + negate -)
  (:use (:q Prelude))
  (:import GHC.Base liftA2)
  (:export (module Algebra) (module Prelude)))


(class (Monoid m) ()
  (type zero m)
  (type + (-> m m m)))

(class (Group g) ((Monoid g))
  (type negate (-> g g))
  (type - (-> g g g))
  (negate #'(- zero))
  ((- x y) (+ x (- y))))


(instance (Monoid (f m)) (:overlapping (Monoid m) (Applicative f))
  (zero (pure zero))
  (+ (liftA2 +)))

(instance (Group (f g)) ((Group g) (Applicative f))
  (negate (fmap negate))
  (- (liftA2 -)))


(instance (Monoid a) ((Num a))
  (zero 0)
  (+ (Prelude.+)))

(instance (Group a) ((Num a))
  (negate Prelude.negate)
  (- (Prelude.-)))
